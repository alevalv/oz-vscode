{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Mozart-Oz",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#entities"
        },
        {
            "include": "variables"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#statements"
        },
        {
            "include": "#invalid"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.oz",
                    "match": "\\b(then|andthen|at|attr|choice|class|cond|declare|define|dis|div|do|elsecase|export|fail|feat|finally|for|from|functor|import|in|lazy|lock|meth|mod|not|of|or|orelse|prepare|prop|require|self|skip|then|thread|unit|end|local)\\b"
                },
                {
                    "name": "keyword.control.conditional.oz",
                    "match": "\\b(else|elseif|if)\\b"
                },
                {
                    "name": "keyword.control.function.oz",
                    "match": "\\b(fun|proc)\\b"
                },
                {
                    "name": "keyword.control.trycatch.oz",
                    "match": "\\b(catch|raise|try|finally)\\b"
                },
                {
                    "name": "keyword.control.case.oz",
                    "match": "\\b(case|of|then)\\b"
                },
                {
                    "name": "keyword.control.operator.oz",
                    "match": "\\b(Or|And|\\+|-|::|&|@|==|=<|>=|>|<|mod|#|\\.|\\|)\\b"
                },
                {
                    "name": "keyword.control.operator.assignment.oz",
                    "match": "\\b(\\=|\\=:)\\b"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.numeric.oz",
                    "match": "\\b(\\d+|\\d+\\.\\d+])\\b"
                },
                {
                    "name": "constant.language.oz",
                    "match": "\\b(false|true|nil)\\b"
                }
            ]
        },
        "entities": {
            "patterns": [
                {
                    "name": "entity.name.function.oz",
                    "match": "{([A-z0-9]\\.*)+ (([A-z0-9]) *)+}"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.number-sign.oz",
                    "match": "(%).*$\n?"
                },
                {
                    "name": "comment.block.oz",
                    "begin": "/\\*",
                    "captures":{
                        "0" :
                        {
                            "name": "punctuation.definition.comment.mn"
                        }
                    },
                    "end": "\\*/"
                }
            ]
        },

        "statements":
        {
            "patterns": [
                {
                    "name": "caseexpresion.expr.oz",
                    "begin": "(case)\\s+.*\\s+of",
                    "beginCaptures":
                    {
                        "1":
                        {
                            "name":"keyword.control.case.oz"
                        }
                    },
                    "end": "end"
                }
            ]
        },
        "invalid":
        {
            "patterns": [
                {
                    "name": "invalid.illegal.incomplete-assigment.oz",
                    "match": "\\b[A-Z][0-9a-zA-Z]*\\s*=\\s*\\n"
                }
            ]
        },
        "meta":
        {
            "patterns": [
                {
                    "name": "meta.variable.oz",
                    "match": "[A-Z][0-9a-zA-Z]*"
                }
            ]
        }
    },
    "scopeName": "source.oz"
}